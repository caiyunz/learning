"""
3.1基本字符串操作
所有标准的序列操作(索引，分片，乘法，判断成员资格，求长度，取最小值和最大值)对字符串同样适用；上一章已经讲述了这些操作。但是，请记住字符串都是不可变的。
那么Python提供的所有字符串格式化功能用不到太多。
字符串格式化使用字符串格式化操作符(这个名字还是很恰当的)即百分号%来实现。
注意:%也可以用作模运算(求余)操作符。
在%的左侧放置一个字符串(格式化字符串),而右侧则放置希望格式化的值。可以使用一个值，如一个字符串或者数字，也可以使用多个值的元组或者下一章将会讨论的字典。一般情况下使用元组:
>>> format="Hellp,%s,%s enough for ya?"
>>> values=('world','Hot')
>>> print format %values
Hellp,world,Hot enough for ya?
注意:如果使用列表或者其他序列代替元组，那么序列就会被解释为一个值。只有元组和字典可以格式化一个以上的值。
格式化字符串的%s部分称为转换说明符，它们标记了需要插入转换值的位置。s表示值会被格式化为字符串-如果不是字符串，则会用str将其转换为字符串。这个方法对大多数值都有效。
注意:如果要在格式化里面包括百分号，那么必须使用%%,这样Python就不会将百分号误认为是转换说明符了。
如果要格式化实数(浮点数),可以使用f说明符类型，同时提供所需要的精度:一个句点再加上希望保留的小数位数。因为格式化说明符总是以表示类型的字符结束，所以精度应该放在类型字符前面:
模板字符串
string模块提供另外一种格式化值的方法:模板字符串。它的工作方式类似于很多UNIX Shell里的变量替换。如下所示，substitute这个模板方法会用传递进来的关键字参数foo替换字符串中的$foo
3.3字符串格式化:完整版
格式化操作符的右操作数可以是任何东西，如果是元组或者映射类型，那么字符串格式化将会有所不同。
如果右操作符数是元组的话，则其中的每一个元素都会被单独格式化，每个值都需要一个对应的转换说明符。
注意:如果需要转换的元组作为转换表达式的一部分存在，那么必须将它用圆括号括起来，以避免出错。
基本的转换说明符(与此对应的是完整的转换说明符，也就是包括映射键的说明符)包括以下部分呢。注意，这些项的顺序是重要的。
1.%字符：标记转换说明符的开始。
2.转换标志(可选):-表示左对齐;+表示在转换值之前要加上正负号;""(空白符)表示正数之前保留空格;0表示转换值若位数不够则用0填充。
3.最小字段宽度:转换后的字符串至少应该具有该值指定的宽度。如果是*,则宽度会从值元组中读出。
4.点(.)后跟精度值:如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*,那么精度将会从元组中读出。

3.3.2字段宽度和精度
转换说明符可以包括字段宽度和精度。字段宽度是转换后的值所保留的最小字符个数，精度(对于数字转换来说)则是结果中应该包含的小数位数，或者(对于字符串转换来说)是转换后的值所能包含的最大字符个数。
这两个参数都是整数，通过点号.分隔。虽然两个都是可选的参数，但如果只给出精度，就必须包含点号:
'%10f' % pi
可以使用*(星号)作为字段宽度或者精度(或者两者都使用*),此时数值会从元组参数中读出:
'%.*s' %(5,'Guido van Rossum')
Guido
3.3.3符号,对齐和0填充
在字段宽度和精度值之前还可以放置一个"标表",该标表可以是零，加号，减号或空格。
零表示数字将会用0进行填充
3.4字符串方法
字符串的方法要丰富得多，这是因为字符串从string模块中"继承"了很多方法，而在早期版本的Python中，这些方法都是作为函数出现的。
因为字符串的方法实在太多，在这里只介绍一些特别有用的。
尽管字符串方法完全开源于string模块，但是这个模块还包括一些不能作为字符串方法使用的常量和函数。下面是一些有用的字符串常量
string.digits:包含数字0-9的字符串
string.letters:包含所有字母的字符串
string.lowercase:包含所有小写字母的字符串
string.printable:包含所有标点的字符串
string.punctuation:包含所有标点的字符串
string.uppercase:包含所有大写字母的字符串
字母字符串常量与地区有关。如果可以确定自己使用的是ASCII,那么可以在变量中使用ascii_前缀

3.4.1 find
find 方法可以在一个较长的字符串中查找子字符串。它返回子串所在位置的最左端索引。
>>> 'With a moo-moo here,and a moo-moo there'.find('moo')
7
>>> title="Monty Python's Flying Circus"
>>> title.find('Monty')
0
>>> title.find('Python')
6
>>> subject='$$$ Get rich now！！！$$$'
>>> subject.find('!!!',0,16) 提供起始点和结束值
注意:由起始和终止值指定的范围(第二和第三个参数)包含第一个索引，但不包含第二个索引。这在Python中是个惯例

3.4.2 join
join方法是非常重要的字符串方法，它是split方法的逆方法，用来在队列中添加元素:
3.4.3 lower
lower方法返回字符串的小写字母版
如果想要编写"不区分大小写"的代码的话，那么这个方法就派上用场了--代码会忽略大小写状态。例如，如果想在列表中查找一个用户名是否存在：列表包含字符串'gumby',而用户输入的是'Gumby',就找不到了:
if 'Gumby' in ['gumby','smith','jones']:print 'Found it!'

如果存储的是'Gumby'而用户输入'gumby'甚至是'GUMBY',结果也是一样的。解决方法就是在存储和搜索时把所有名字都转换为小写。
标题转换
和lower方法相关的是title方法，它会将字符串转换为标题--也就是所有单词的首字母大写，而其他字母小写。但是它使用的单词划分方法可能会得到并不自然的结果:
>>> "that's all folks".title()
"That'S All Folks"
再介绍另外一个string模块的capwords函数：
当然，如果要得到正确首字母大写的标题(这要根据你的风格而定，可能要小写冠词，连词及5个字母以下的介词等)

3.4.4 replace
replace方法返回某字符串的所有匹配项均被替换之后得到的字符串。
>>> 'This is a test'.replace('is','eez')
'Theez eez a test'
如果曾经用过文字处理程序中的"查找并替换"功能的话，就不会质疑这个方法的用处了。

3.4.5 split
这是一个非常重要的字符串方法，它是join的逆方法，用来将字符串分割成序列。
>>> '1+2+3+4+5'.split('+')
['1', '2', '3', '4', '5']
注意:如果不提供任何分隔符，程序会把所有空格作为分隔符(空格，制表，换行等)

3.4.6 strip
strip方法返回除两侧空格的字符串:
>>> '      internal whitespace is kept       '.strip()
'internal whitespace is kept'
它和lower方法一起使用的话就可以很方便的对比输入的和存储的值。让我们回到lower部分中的用户名的例子，假设用户在输入名字时无意中在名字后面加上了空格:
>>> names=['gumby','smith','jones']
>>> name='gumby '
>>> if name in names:print 'Found it!'
... 
>>> if name.strip() in names:print 'Found it!'
... 
Found it!
也可以指定需要去除的字符，将它们列为参数即可。
>>> '*** SPAM * for * everyone!!! ***'.strip('*!')
' SPAM * for * everyone!!! '
这个字符只会去除两侧的字符，所以字符串中的星号没有被去掉。

3.4.7 translate
translate方法和replace方法一样，可以替换字符串中的某些部分，但是和前者不同的是，translate方法只处理单个字符。它的优势在于可以同时进行多个替换，有些时候比replace效率高得多。
使用这个方法的方式有很多（比如替换换行符或者其他因平台而移的特殊字符)。但是让我们考虑一个简单的例子：假设需要将纯正的英文文本转换为带有德国口音的版本。为此，需要把字符c转换为k把s替换为z
在使用translate转换之前，需要先完成一张转换表。转换表中是以某字符替换某字符的对应关系。因为这个表有多达256个项目，我们还是不要自己写了，使用string模块里面的maketrans函数就行。
maketrans函数接受两个参数:两个等长的字符串，表示第一个字符串中的每个字符都用第二个字符串中相同位置的字符替换。>>> '*** SPAM * for * everyone!!! ***'.strip('*!')
' SPAM * for * everyone!!! '>>> '*** SPAM * for * everyone!!! ***'.strip('*!')
' SPAM * for * everyone!!! '>>> '*** SPAM * for * everyone!!! ***'.strip('*!')
' SPAM * for * everyone!!! '
"""
